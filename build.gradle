plugins {
    id 'java'
    id 'io.qameta.allure' version '2.11.2'
    id "io.freefair.lombok" version "8.6"
}

group = "ru.hh"
version = "1.0-SNAPSHOT"

repositories {
    mavenCentral()
}

def restAssuredVersion = "5.4.0",
    junitVersion = "5.10.2",
    slf4jVersion = "2.0.13",
    selenideVersion = "7.3.2",
    allureVersion = "2.25.0",
    ownerVersion = "1.0.12",
    jacksonVersion = "2.17.1",
    faker = "1.0.2",
    assertj = "3.25.3"

allure {
    report {
        version.set(allureVersion)
    }
    adapter {
        aspectjWeaver.set(true)
        frameworks {
            junit5 {
                adapterVersion.set(allureVersion)
            }
        }
    }
}

compileJava {
    options.encoding = 'UTF-8'
}
compileTestJava {
    options.encoding = 'UTF-8'
}

dependencies {
    testImplementation(
            "io.rest-assured:rest-assured:$restAssuredVersion",
            "io.rest-assured:json-schema-validator:$restAssuredVersion",
            "io.qameta.allure:allure-rest-assured:$allureVersion",
            "org.junit.jupiter:junit-jupiter:$junitVersion",
            "org.slf4j:slf4j-simple:$slf4jVersion",
            "com.codeborne:selenide:$selenideVersion",
            "io.qameta.allure:allure-selenide:$allureVersion",
            "org.aeonbits.owner:owner:$ownerVersion",
            "com.fasterxml.jackson.core:jackson-databind:$jacksonVersion",
            "com.github.javafaker:javafaker:$faker",
            "org.assertj:assertj-core:$assertj"
    )
}

tasks.withType(Test) {
    useJUnitPlatform()
    systemProperties(System.getProperties())

    testLogging {
        lifecycle {
            events "started", "skipped", "failed", "standard_error", "standard_out"
            exceptionFormat "short"
        }
    }
}

task authorization_test(type: Test) {
    useJUnitPlatform {
        includeTags("authorization")
    }
}

task mainPage_test(type: Test) {
    useJUnitPlatform {
        includeTags("main_page")
    }
}

task searchPage_test(type: Test) {
    useJUnitPlatform {
        includeTags("search_page")
    }
}

task vacancies_test(type: Test) {
    useJUnitPlatform {
        includeTags("vacancies_API")
    }
}

task userInfo_test(type: Test) {
    useJUnitPlatform {
        includeTags("user_info_API")
    }
}

task employers_test(type: Test) {
    useJUnitPlatform {
        includeTags("employers_API")
    }
}